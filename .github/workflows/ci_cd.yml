name: CI/CD
on:
  push:
    branches:
      - '**'
jobs:
  # runs on branch pushes only
  ci:
    name: Run Tests
    if: startsWith(github.ref, 'refs/heads')
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install dependencies
        run: npm ci

      - name: happy-path
        id: happy_path
        uses: ./
        with:
          timeout_minutes: 1
          max_attempts: 2
          command: npm -v
      - uses: nick-invision/assert-action@v1
        with:
          expected: true
          actual: ${{ steps.happy_path.outputs.total_attempts == '1' && steps.happy_path.outputs.exit_code == '0' }}

      - name: sad-path (retry_wait_seconds)
        id: sad_path_wait_sec
        uses: ./
        continue-on-error: true
        with:
          timeout_minutes: 1
          max_attempts: 3
          retry_wait_seconds: 15
          command: npm install this-isnt-a-real-package-name-zzz
      - uses: nick-invision/assert-action@v1
        with:
          expected: 3
          actual: ${{ steps.sad_path_wait_sec.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.sad_path_wait_sec.outcome }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: 'Final attempt failed'
          actual: ${{ steps.sad_path_wait_sec.outputs.exit_error }}
          comparison: contains

      - name: sad-path (error)
        id: sad_path_error
        uses: ./
        continue-on-error: true
        with:
          timeout_minutes: 1
          max_attempts: 2
          command: node -e "process.exit(1)"
      - uses: nick-invision/assert-action@v1
        with:
          expected: 2
          actual: ${{ steps.sad_path_error.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.sad_path_error.outcome }}

      - name: retry_on (timeout) fails early if error encountered
        id: retry_on_timeout_fail
        uses: ./
        continue-on-error: true
        with:
          timeout_minutes: 1
          max_attempts: 3
          retry_on: timeout
          command: node -e "process.exit(2)"
      - uses: nick-invision/assert-action@v1
        with:
          expected: 1
          actual: ${{ steps.retry_on_timeout_fail.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.retry_on_timeout_fail.outcome }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: 2
          actual: ${{ steps.retry_on_timeout_fail.outputs.exit_code }}

      - name: retry_on (error)
        id: retry_on_error
        uses: ./
        continue-on-error: true
        with:
          timeout_minutes: 1
          max_attempts: 2
          retry_on: error
          command: node -e "process.exit(2)"
      - uses: nick-invision/assert-action@v1
        with:
          expected: 2
          actual: ${{ steps.retry_on_error.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.retry_on_error.outcome }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: 2
          actual: ${{ steps.retry_on_error.outputs.exit_code }}

      # test this manually. expected output:
      #   now you see me
      #   now you see me
      - name: hide_output 1 (false)
        id: hide_output_1
        uses: ./
        with:
          timeout_seconds: 2
          max_attempts: 3
          hide_output: false
          command: echo now you see me
      - name: hide_output 2 (true)
        id: hide_output_2
        uses: ./
        with:
          timeout_seconds: 2
          max_attempts: 3
          hide_output: true
          command: echo now you dont
      - name: hide_output 3 (false)
        id: hide_output_3
        uses: ./
        with:
          timeout_seconds: 2
          max_attempts: 3
          #hide_output: false # default is false
          command: echo now you see me
      - name: hide_output 4 (true)
        id: hide_output_4
        uses: ./
        with:
          timeout_seconds: 2
          max_attempts: 3
          hide_output: 1 # boolean true
          command: echo now you dont

      # test this manually. expected output:
      #   Attempt | Status  | RC | Time/ms | Out Lines | Err Lines
      #         1 | NonZero |  1 |      20 |      1000 |         0
      #         2 | NonZero |  1 |      20 |      1000 |         0
      - name: show_stats 1
        id: show_stats_1
        uses: ./
        with:
          timeout_seconds: 2
          max_attempts: 2
          hide_output: true
          show_stats: true
          command: seq 1 1000; false

      # test this manually. expected output:
      # TODO return code? use -1 for undefined RC?
      #   Attempt | Status  | RC | Time/ms | Out Lines | Err Lines
      #         1 | TimeOut |  ? |    1000 |         0 |      1000
      #         2 | TimeOut |  ? |    1000 |         0 |      1000
      - name: show_stats 2
        id: show_stats_2
        uses: ./
        with:
          timeout_seconds: 1
          max_attempts: 2
          show_stats: true
          command: seq 1 1000 >&2; sleep 10

      # test this manually. expected output:
      #   Retry - Last Lines of Command Output:
      #   Attempt 1:
      #        10 2
      #        10 1
      #      1000 -4
      #      1000 -3
      #      1000 -2
      #      1000 -1
      #   Attempt 2:
      #        10 2
      #        10 1
      #      1000 -4
      #      1000 -3
      #      1000 -2
      #      1000 -1
      # lines with negative numbers should be printed as errors
      - name: save_lines 1
        id: save_lines_1
        uses: ./
        with:
          timeout_seconds: 2
          max_attempts: 2
          save_lines: 2 4
          command: seq 100 1; sleep 1; seq -100 -1 >&2; sleep 10

      # test this manually. expected output:
      #   Retry - Last Lines of Command Output:
      #   Attempt 1:
      #         0 1
      #         0 2
      #         0 3
      #         0 4
      # only lines with positive numbers should be visible
      - name: save_lines 1
        id: save_lines_1
        uses: ./
        with:
          timeout_seconds: 2
          max_attempts: 1
          save_lines: all 0
          command: seq 1 4; seq -1 -1 -4 >&2


        # timeout tests (takes longer to run so run last)
      - name: sad-path (timeout)
        id: sad_path_timeout
        uses: ./
        continue-on-error: true
        with:
          timeout_seconds: 15
          max_attempts: 2
          command: node -e "(async()=>await new Promise(r => setTimeout(r, 120000)))()"
      - uses: nick-invision/assert-action@v1
        with:
          expected: 2
          actual: ${{ steps.sad_path_timeout.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.sad_path_timeout.outcome }}

      - name: retry_on (timeout)
        id: retry_on_timeout
        uses: ./
        continue-on-error: true
        with:
          timeout_seconds: 15
          max_attempts: 2
          retry_on: timeout
          command: node -e "(async()=>await new Promise(r => setTimeout(r, 120000)))()"
      - uses: nick-invision/assert-action@v1
        with:
          expected: 2
          actual: ${{ steps.retry_on_timeout.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.retry_on_timeout.outcome }}

      - name: retry_on (error) fails early if timeout encountered
        id: retry_on_error_fail
        uses: ./
        continue-on-error: true
        with:
          timeout_seconds: 15
          max_attempts: 2
          retry_on: error
          command: node -e "(async()=>await new Promise(r => setTimeout(r, 120000)))()"
      - uses: nick-invision/assert-action@v1
        with:
          expected: 1
          actual: ${{ steps.retry_on_error_fail.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.retry_on_error_fail.outcome }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: 1
          actual: ${{ steps.retry_on_error_fail.outputs.exit_code }}

      - name: sad-path (timeout minutes)
        id: sad_path_timeout_minutes
        uses: ./
        continue-on-error: true
        with:
          timeout_minutes: 1
          max_attempts: 2
          command: node -e "(async()=>await new Promise(r => setTimeout(r, 120000)))()"
      - uses: nick-invision/assert-action@v1
        with:
          expected: 2
          actual: ${{ steps.sad_path_timeout.outputs.total_attempts }}
      - uses: nick-invision/assert-action@v1
        with:
          expected: failure
          actual: ${{ steps.sad_path_timeout.outcome }}

  # runs on push to master only
  cd:
    name: Publish Action
    needs: ci
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-18.04
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 12
      - name: Install dependencies
        run: npm ci
      - name: Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Tag
        run: git tag -f v${MAJOR_VERSION} && git push -f origin v${MAJOR_VERSION}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAJOR_VERSION: ${{ steps.semantic.outputs.new_release_major_version }}
